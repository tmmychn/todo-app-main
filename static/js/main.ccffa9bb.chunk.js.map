{"version":3,"sources":["components/Header.js","components/TodoNavbar.js","components/TodoItem.js","components/ItemList.js","components/TodoComponent.js","App.js","reportWebVitals.js","index.js"],"names":["Header","useEffect","$","on","toggleClass","find","toggle","className","src","alt","style","display","TodoNavbar","isHidden","updateFilter","selectFilter","useCallback","i","length","removeClass","this","index","addClass","TodoItem","props","text","ItemList","todoItems","items","map","item","TodoComponent","useState","setItems","count","setCount","filter","setFilter","updateItemCount","e","keyCode","addItem","val","sortable","newItem","newTodoItems","parent","console","log","toggleItem","clearItem","showFilteredResults","hover","type","placeholder","id","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ccffa9bb.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css';\nimport { useEffect } from 'react';\nimport $ from 'jquery'\n\nconst Header = () => {\n\n    useEffect(()=> {\n        const toggleDarkMode = () => {\n            $(\".dark-mode-toggle\").on(\"click\", function(){\n                $(\".bg-img\").toggleClass(\"light-img dark-img\");\n                $(\".dark-mode-toggle\").find('img').toggle();\n                $(\".app\").toggleClass(\"bg-light bg-dark-1\");\n            })\n        }\n\n        toggleDarkMode()\n    }, [])\n\n    return (\n        <header>\n            <div className=\"logo\">\n                <h1 className=\"text-white\">TODO</h1>\n            </div>\n            <button className=\"dark-mode-toggle\">\n                <img src=\"./images/icon-moon.svg\" alt=\"moon icon\" />\n                <img src=\"./images/icon-sun.svg\" alt=\"sun icon\" style={{display: \"none\"}} />\n            </button>\n        </header>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport '../components/TodoComponent.css'\nimport $ from 'jquery'\nimport {useEffect, useCallback} from 'react'\n\nconst TodoNavbar = ({isHidden, updateFilter}) => {\n\n    const selectFilter = useCallback(() => {\n        // Highlight numbered dot when selected\n        for (var i = 0; i < $(\".todo-status-navbar li\").length; i++){\n            $(\".todo-status-navbar li:eq(\" + i + \")\").on(\"click\", function() {\n                $(\".todo-status-navbar li\").removeClass(\"current\")\n                updateFilter($(this).index())\n                $(this).addClass(\"current\")\n            });\n         }\n    }, [updateFilter])\n\n    useEffect(() => {\n        selectFilter()\n    }, [selectFilter])\n    \n    return (\n        <ul className={`todo-status-navbar todo-style text-semitrans ${isHidden}`}>\n            <li className=\"current\">All</li>\n            <li>Active</li>\n            <li>Completed</li>\n        </ul>\n    )\n}\n\nexport default TodoNavbar\n","import React from 'react'\n\nconst TodoItem = (props) => {\n\n    return (\n        <li className={\"todo-item-container todo-style active\"}>\n            <div className=\"todo-item new-item\">\n                <span className=\"todo-checkbox\"/>\n                <div className=\"todo-item-text\">{props.text}</div>\n            </div>\n            <span className=\"todo-item-close\"/>\n        </li>\n    )\n}\n\nexport default TodoItem\n","import React from 'react'\nimport TodoItem from './TodoItem'\n\nconst ItemList = (props) => {\n    const items = props.items\n    const todoItems = items.map((item, index) => \n        <TodoItem key={index} text={item}/>\n    )\n    return (\n        <ul className=\"todo-list\">\n            {todoItems}\n        </ul>\n    )\n}\n\nexport default ItemList\n","import React from 'react'\nimport './TodoComponent.css'\nimport { useState, useEffect } from 'react'\nimport $ from 'jquery'\nimport 'jquery-ui-bundle';\nimport 'jquery-ui-bundle/jquery-ui.css';\nimport TodoNavbar from './TodoNavbar'\nimport ItemList from './ItemList'\n\nconst TodoComponent = () => {\n\n    const todoItems = [\n        \"Complete todo app\",\n        \"Gamuda Gardens\",\n        \"Jog in the park\",\n        \"Jog in the park\",\n        \"Jog in the park\"\n    ]\n        \n    \n    const [items, setItems] = useState(todoItems)\n    const [count, setCount] = useState(0)\n    const [filter, setFilter] = useState(0)\n\n    const updateItemCount = () => {\n        setCount($(\".active\").length)\n    }\n\n    const clearCompleted = () => {\n        $(\".completed\").addClass(\"cleared\")\n    }\n\n    // Function to be passed as prop into Todo Navbar\n    // To update filter as tab is selected\n    const updateFilter = (i) => {\n        setFilter(i)\n    }\n\n    \n    \n    /* ------------------- */\n    /* useEffect           */\n    /* ------------------- */\n    useEffect(() => {\n        $(\"#todo-create-input\").on(\"keydown\", function(e){\n            if(e.keyCode === 13) {\n                addItem($(this).val())\n            }\n        })\n\n        // Allow li to be dragged and rearranged\n        $( function() {\n            $( \".todo-list\" ).sortable();\n        } );\n\n        const addItem = (newItem) => {\n                const newTodoItems = [...items, newItem]\n                setItems(newTodoItems)\n            }\n\n        const toggleItem = () => {\n            for(var i = 0; i < $(\".new-item\").length; i++)\n            {\n                $(\".new-item:eq(\" + i + \")\").on(\"click\", function(){\n                    $(this).parent().toggleClass(\"active completed\")\n                    console.log($(this) + \"toggled\")\n                    \n                    // Update item count after each toggle\n                    updateItemCount()\n                })\n            }\n\n            // remove \"new-item\" class from todo items that already have event-listenrs\n            $(\".todo-item\").removeClass(\"new-item\")\n            console.log(\"toggle item called\")\n        }\n\n        const clearItem = () => {\n            for(var i = 0; i < $(\".todo-item-close\").length; i++)\n            {\n                $(\".todo-item-close:eq(\" + i + \")\").on(\"click\", function(){\n                    $(this).parent().removeClass(\"active\")\n                    $(this).parent().addClass(\"cleared\")\n                    \n                    // Update item count after each clear\n                    updateItemCount()\n                })\n            }\n        }\n\n        const showFilteredResults = (i) => {\n            switch(i) {\n                case 0:\n                    $(\".todo-item-container\").removeClass(\"hidden\")\n                    console.log(\"case 0\" + filter)\n                    break\n                case 1:\n                    $(\".todo-item-container\").removeClass(\"hidden\")\n                    $(\".todo-item-container:not(.active)\").addClass(\"hidden\")\n                    console.log(\"case 1\" + filter)\n                    break\n                case 2:\n                    $(\".todo-item-container\").removeClass(\"hidden\")\n                    $(\".todo-item-container:not(.completed)\").addClass(\"hidden\")\n                    break\n                default:\n                    $(\".todo-item-container\").removeClass(\"hidden\")\n                    console.log(\"case default\")\n                    break\n            }\n        }\n\n        const todoItemHover = () => {\n            $(\".todo-item-container\").hover(\n                function () {\n                $(this).addClass('hover');\n              }, \n              function () {\n                $(this).removeClass('hover');\n              });\n        }\n        \n        toggleItem()\n        clearItem()\n        updateItemCount()\n        showFilteredResults(filter)\n        todoItemHover()\n    }, [filter, items])\n\n    return (\n        <div className='todo-container'>\n            <div className=\"todo-create todo-style\">\n                <span className=\"todo-checkbox\"/>\n                <input type=\"text\" placeholder=\"Create a new todo...\" \n                id=\"todo-create-input\" /> \n            </div>\n            <div className=\"overflow-container\">\n                <div className=\"todo-list-container\">\n                    <ItemList items={items} setCount={setCount}/>\n                    <div className=\"todo-menu-container text-semitrans\">\n                        <div>{count} items left</div>\n                        {/* Clear completed button */}\n                        <button onClick={clearCompleted}>Clear Completed</button>\n                    </div>\n                </div>\n                <TodoNavbar updateFilter={updateFilter}/>\n            </div>\n            \n            <h3 className=\"drag-text text-semitrans\">Drag and drop to reorder list</h3>\n        </div>\n    )\n}\n\nexport default TodoComponent\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport TodoComponent from './components/TodoComponent';\n\nconst App = () => {\n  return (\n    <div className=\"app bg-light\">\n      <div className=\"bg-img light-img\" />\n      <div className=\"container\">\n        <Header />\n        <TodoComponent />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}